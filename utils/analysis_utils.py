import json
import re
import asyncio
import time
from typing import List, Dict, Any, Tuple
from httpx import AsyncClient
import openai
from fastapi import HTTPException
from utils.logging_utils import log_timing, logger, TimingContext

@log_timing
def extract_json(response_text: str) -> str:
    """Extract JSON content from an AI response text"""
    import re
    json_match = re.search(r'```json\s*(\{.*?\})\s*```', response_text, re.DOTALL)
    if json_match:
        return json_match.group(1)
    json_match = re.search(r'(\{.*?\})', response_text, re.DOTALL)
    if json_match:
        return json_match.group(1)
    raise ValueError("Ingen giltig JSON hittades")

@log_timing
def calculate_design_score(analysis_results):
    """Genererar en po√§ng baserat p√• analysresultaten fr√•n OpenAI, d√§r f√∂rsta intrycket spelar stor roll."""
    usability = 0.5
    aesthetics = 0.5
    performance = 0.5

    first_impression_positive = [
        "stilren", "modern design", "professionell k√§nsla", "attraktiv", "tilltalande", "ren layout",
        "estetiskt behaglig", "harmonisk", "snygg", "inbjudande", "v√§lkomnande", "imponerande"
    ]
    first_impression_negative = [
        "f√∂r√•ldrad", "r√∂rig", "amat√∂rm√§ssig", "skr√§pig", "kaotisk", "ful design", "tr√•kig", "f√∂rvirrande",
        "ostrukturerad", "skr√§ckexempel", "brist p√• stil"
    ]

    positive_usability = ["l√§tt att navigera", "intuitiv", "logisk layout", "anv√§ndarv√§nlig"]
    negative_usability = ["f√∂rvirrande", "d√•lig navigation", "r√∂rigt gr√§nssnitt"]

    positive_aesthetics = ["v√§lstrukturerad design", "attraktiv layout", "harmonisk f√§rgs√§ttning"]
    negative_aesthetics = ["r√∂rig design", "sv√•r att l√§sa", "kaotisk struktur"]

    positive_performance = ["snabb laddningstid", "optimerad", "responsiv design"]
    negative_performance = ["l√•ngsam laddning", "seg", "icke-responsiv design"]

    full_analysis_text = " ".join(analysis_results).lower()
    logger.info("üîç Analyserad text: %s (f√∂rkortad)", full_analysis_text[:200] + "...")

    first_impression_score = 0.5
    for word in first_impression_positive:
        if word in full_analysis_text:
            first_impression_score += 0.2
    for word in first_impression_negative:
        if word in full_analysis_text:
            first_impression_score -= 0.3

    first_impression_score = min(max(first_impression_score, 0.2), 0.8)

    for word in positive_usability:
        if word in full_analysis_text:
            usability += 0.15
    for word in negative_usability:
        if word in full_analysis_text:
            usability -= 0.2

    for word in positive_aesthetics:
        if word in full_analysis_text:
            aesthetics += 0.15
    for word in negative_aesthetics:
        if word in full_analysis_text:
            aesthetics -= 0.2

    for word in positive_performance:
        if word in full_analysis_text:
            performance += 0.15
    for word in negative_performance:
        if word in full_analysis_text:
            performance -= 0.2

    usability *= first_impression_score
    aesthetics *= first_impression_score
    performance *= first_impression_score

    scores = {
        "usability": round(min(max(usability, 0.05), 0.95), 2),
        "aesthetics": round(min(max(aesthetics, 0.05), 0.95), 2),
        "performance": round(min(max(performance, 0.05), 0.95), 2),
        "first_impression": round(first_impression_score, 2)
    }
    logger.info("‚úÖ Ber√§knade po√§ng: %s", scores)
    return scores

@log_timing
def get_prompt_by_type(analysis_type: str, extracted_data: Dict[str, Any], url: str) -> str:
    """Returnerar r√§tt prompt baserat p√• analystyp"""
    logger.info(f"üîÑ Genererar prompt f√∂r analystyp: {analysis_type}")
    
    base_structure = """
    Svara ENDAST med ett JSON-objekt i exakt det format jag specificerar. 
    Inkludera inga andra f√∂rklaringar, kommentarer eller mark√∂rer utanf√∂r JSON-objektet.
    Svara p√• svenska.
    """
    
    if analysis_type == "landing_page":
        return f"""
        Du √§r en expert p√• konverteringsoptimering och landningssidor. Analysera webbsidan {url} utifr√•n nedanst√•ende data:

        - Titel: {extracted_data['title']}
        - Meta-beskrivning: {extracted_data['meta_description']}
        - H1-rubriker: {', '.join(extracted_data['headings']['h1'])}
        - H2-rubriker: {', '.join(extracted_data['headings']['h2'])}
        - Knappar: {', '.join(extracted_data['buttons'])}
        
        Analysera:
        1. Tydlighet i budskapet och "call-to-action"
        2. Hur v√§l landningssidan kan konvertera bes√∂kare
        3. Struktur och informationsarrangemang
        4. √ñvertalningsf√∂rm√•ga och s√§ljargument

        {base_structure}

        {{
          "summary": "√ñvergripande bed√∂mning av landningssidan",
          "clarity": "Analys av budskapets tydlighet",
          "conversion_potential": "Bed√∂mning av konverteringspotential",
          "structure": "Bed√∂mning av sidans struktur",
          "persuasiveness": "Analys av √∂vertalningsf√∂rm√•ga",
          "recommendations": "Dina konkreta rekommendationer f√∂r f√∂rb√§ttring"
        }}
        """
        
    elif analysis_type == "product_page":
        return f"""
        Du √§r en expert p√• e-handel och copywriting. Analysera produktsidan {url} utifr√•n nedanst√•ende data:

        - Titel: {extracted_data['title']}
        - Meta-beskrivning: {extracted_data['meta_description']}
        - H1-rubriker: {', '.join(extracted_data['headings']['h1'])}
        - H2-rubriker: {', '.join(extracted_data['headings']['h2'])}
        - Bilder: {len(extracted_data['images'])} bilder hittades
        - Priser: {', '.join(extracted_data['prices']) if extracted_data['prices'] else 'Ingen pris hittad'}
        
        Analysera:
        1. Hur tydlig och s√§ljande produktbeskrivningen √§r
        2. Om m√•lgruppen n√•s effektivt
        3. Hur SEO-optimerat inneh√•llet √§r
        4. Vad som kan f√∂rb√§ttras f√∂r att √∂ka konverteringar

        {base_structure}

        {{
          "summary": "√ñvergripande bed√∂mning av produktsidan",
          "targeting": "Hur v√§l kommunikationen matchar m√•lgruppen",
          "seo": "SEO-analys av produktsidan",
          "persuasiveness": "Analys av produktbeskrivningens √∂vertygande kraft",
          "recommendations": "Konkreta f√∂rb√§ttringsf√∂rslag"
        }}
        """
        
    elif analysis_type == "trust_check":
        return f"""
        Du √§r en expert p√• digitalt f√∂rtroende och s√§kerhet. Analysera webbplatsen {url} fr√•n ett p√•litlighetsperspektiv:

        - Titel: {extracted_data['title']}
        - Meta-beskrivning: {extracted_data['meta_description']}
        - SSL-s√§kerhet: {"Ja" if extracted_data['security_elements']['ssl'] else "Nej"}
        - Certifieringar: {', '.join(extracted_data['security_elements']['certifications']) if extracted_data['security_elements']['certifications'] else 'Inga hittade'}
        - Betalningsmetoder: {', '.join(extracted_data['security_elements']['payment_methods']) if extracted_data['security_elements']['payment_methods'] else 'Inga hittade'}
        
        Analysera:
        1. Professionalism och f√∂rtroendeingivande design
        2. S√§kerhetsindikatorer 
        3. Transparens kring f√∂retaget/verksamheten
        4. Riskindikatorer (eller avsaknad d√§rav)

        {base_structure}

        {{
          "summary": "√ñvergripande bed√∂mning av webbplatsens p√•litlighet",
          "professionalism": "Analys av design och professionellt intryck",
          "security_indicators": "Analys av s√§kerhetsindikatorer",
          "transparency": "Bed√∂mning av transparens kring verksamheten",
          "risk_assessment": "Bed√∂mning av eventuella riskfaktorer",
          "recommendations": "F√∂rslag p√• f√∂rb√§ttringar f√∂r √∂kat f√∂rtroende"
        }}
        """
        
    elif analysis_type == "brand_analysis":
        return f"""
        Du √§r en varum√§rkesexpert med djup f√∂rst√•else f√∂r digital positionering. Analysera webbplatsen {url} fr√•n ett varum√§rkesperspektiv:

        - Titel: {extracted_data['title']}
        - Meta-beskrivning: {extracted_data['meta_description']}
        - F√§rger: {', '.join(extracted_data['design_summary']['colors'])}
        - Typsnitt: {', '.join(extracted_data['design_summary']['fonts'])}
        - H1-rubriker: {', '.join(extracted_data['headings']['h1'])}
        
        Analysera:
        1. Varum√§rkets positionering och l√∂fte
        2. Tonalitet och kommunikationsstil
        3. Visuell identitet och konsekvens
        4. Hur m√•lgruppen tilltalas

        {base_structure}

        {{
          "summary": "√ñvergripande analys av varum√§rket",
          "positioning": "Bed√∂mning av varum√§rkets positionering",
          "tone_of_voice": "Analys av tonalitet och kommunikationsstil",
          "visual_identity": "Bed√∂mning av visuell identitet",
          "audience_appeal": "Hur effektivt varum√§rket tilltalar sin m√•lgrupp",
          "recommendations": "F√∂rslag p√• f√∂rb√§ttringar f√∂r tydligare varum√§rkeskommunikation"
        }}
        """
        
    elif analysis_type == "mobile_experience":
        return f"""
        Du √§r en expert p√• mobilanv√§ndarv√§nlighet och responsiv design. Analysera webbplatsen {url} fr√•n ett mobilperspektiv:

        - Titel: {extracted_data['title']}
        - Meta-beskrivning: {extracted_data['meta_description']}
        - Navigation: {', '.join(extracted_data['navigation'])}
        
        F√∂r denna analys, f√∂rest√§ll dig att du tittar p√• denna webbplats p√• en mobil enhet. Analysera:
        1. Mobilanpassning och responsiv design
        2. L√§ttnavigerad p√• liten sk√§rm
        3. Laddningstider och prestanda f√∂r mobila enheter
        4. Touch-v√§nlighet och anv√§ndbarhet

        {base_structure}

        {{
          "summary": "√ñvergripande bed√∂mning av mobilupplevelsen",
          "responsiveness": "Analys av responsiv design",
          "navigation": "Bed√∂mning av navigationen p√• mobil",
          "performance": "Prestanda och laddningstider f√∂r mobil",
          "usability": "Touch-v√§nlighet och mobilanpassad anv√§ndbarhet",
          "recommendations": "F√∂rslag p√• f√∂rb√§ttringar f√∂r mobilupplevelsen"
        }}
        """
    
    # Default prompt om ingen matchning
    return generate_prompts(extracted_data, url)[0]  # √Öteranv√§nd den befintliga SEO-prompten som fallback

@log_timing
def generate_prompts(extracted_data: Dict[str, Any], url: str) -> Tuple[str, str, str]:
    """Generate standard prompts for SEO, UX, and content analysis"""
    seo_prompt = f"""
    Du √§r en erfaren SEO-specialist. Analysera webbplatsen {url} utifr√•n nedanst√•ende data:

    - Titel: {extracted_data['title']}
    - Meta-beskrivning: {extracted_data['meta_description']}
    - H1-rubriker: {', '.join(extracted_data['headings']['h1'])}
    - H2-rubriker: {', '.join(extracted_data['headings']['h2'])}

    Analysera:
    1. Anv√§ndning av relevanta s√∂kord.
    2. Kvalitet och effektivitet i titel och meta-beskrivning.
    3. Eventuella tekniska SEO-problem.

    Ge en √∂vergripande bed√∂mning, lista n√•gra tydliga observationer (g√§rna i punktform) och ange konkreta rekommendationer.

    Svara ENDAST med ett JSON-objekt enligt f√∂ljande format:
    {{
    "summary": "√ñvergripande bed√∂mning av SEO.",
    "observations": [
        "Observation 1",
        "Observation 2"
    ],
    "recommendations": "Dina konkreta rekommendationer f√∂r SEO."
    }}
    Var god svara p√• svenska.
    """

    ux_prompt = f"""
Du √§r en senior UX-designer. Analysera webbplatsen {url} med fokus p√• anv√§ndarupplevelsen. Utg√• ifr√•n:
- Layout, f√§rgschema och typografi.
- Navigering och anv√§ndarv√§nlighet.
- Anv√§ndarfl√∂de och konvertering.

Ge en √∂vergripande bed√∂mning, lista specifika observationer (g√§rna i punktform) och ge konkreta f√∂rb√§ttringsf√∂rslag.

Svara ENDAST med ett JSON-objekt enligt f√∂ljande format:
{{
  "summary": "√ñvergripande bed√∂mning av UX.",
  "observations": [
    "Observation 1",
    "Observation 2"
  ],
  "recommendations": "Dina konkreta UX-rekommendationer."
}}

Var god svara p√• svenska.
"""

    content_prompt = f"""
Du √§r en erfaren inneh√•llsstrateg och copywriter. Analysera webbplatsen {url} utifr√•n:
- Tydlighet och relevans i inneh√•llet.
- Struktur och l√§sbarhet.
- Hur v√§l inneh√•llet kommunicerar webbplatsens syfte.

Ge en √∂vergripande bed√∂mning, lista tydliga observationer (g√§rna i punktform) samt konkreta rekommendationer f√∂r att f√∂rb√§ttra inneh√•llet.

Svara ENDAST med ett JSON-objekt enligt f√∂ljande format:
{{
  "summary": "√ñvergripande bed√∂mning av inneh√•llet.",
  "observations": [
    "Observation 1",
    "Observation 2"
  ],
  "recommendations": "Dina konkreta inneh√•llsrekommendationer."
}}

Var god svara p√• svenska.
"""
    
    return seo_prompt, ux_prompt, content_prompt

@log_timing
def generate_competitor_prompts(extracted_data: Dict[str, Any], url: str) -> Tuple[str, str, str]:
    """Genererar promptar f√∂r konkurrentanalys med fokus p√• styrkor ist√§llet f√∂r f√∂rb√§ttringsf√∂rslag"""
    
    competitor_seo_prompt = f"""
    Du √§r en erfaren SEO-specialist med fokus p√• konkurrentanalys. Analysera webbplatsen {url} utifr√•n nedanst√•ende data:

    - Titel: {extracted_data['title']}
    - Meta-beskrivning: {extracted_data['meta_description']}
    - H1-rubriker: {', '.join(extracted_data['headings']['h1'])}
    - H2-rubriker: {', '.join(extracted_data['headings']['h2'])}

    Analysera:
    1. Anv√§ndning av relevanta s√∂kord.
    2. Kvalitet och effektivitet i titel och meta-beskrivning.
    3. Teknik och struktur som ger dem f√∂rdelar i s√∂kresultaten.

    Identifiera ENDAST deras styrkor inom SEO - fokusera inte p√• svagheter eller f√∂rb√§ttringsf√∂rslag.
    Ge en √∂vergripande bed√∂mning, lista n√•gra tydliga styrkor (g√§rna i punktform) och identifiera vad som g√∂r deras SEO-strategi framg√•ngsrik.

    Svara ENDAST med ett JSON-objekt enligt f√∂ljande format:
    {{
    "summary": "√ñvergripande bed√∂mning av konkurrentens SEO-styrkor.",
    "observations": [
        "Styrka 1",
        "Styrka 2"
    ],
    "recommendations": "Vilka strategier som g√∂r deras SEO framg√•ngsrik."
    }}
    Var god svara p√• svenska.
    """

    competitor_ux_prompt = f"""
    Du √§r en senior UX-designer med fokus p√• konkurrentanalys. Analysera webbplatsen {url} med fokus p√• anv√§ndarupplevelsen. Utg√• ifr√•n:
    - Layout, f√§rgschema och typografi.
    - Navigering och anv√§ndarv√§nlighet.
    - Anv√§ndarfl√∂de och konvertering.

    Identifiera ENDAST deras styrkor inom UX/UI - fokusera inte p√• brister eller f√∂rb√§ttringsomr√•den.
    Ge en √∂vergripande bed√∂mning, lista specifika positiva observationer (g√§rna i punktform) och beskriv varf√∂r deras UX-strategi √§r effektiv.

    Svara ENDAST med ett JSON-objekt enligt f√∂ljande format:
    {{
      "summary": "√ñvergripande bed√∂mning av konkurrentens UX-styrkor.",
      "observations": [
        "Styrka 1",
        "Styrka 2"
      ],
      "recommendations": "Varf√∂r deras UX-strategi √§r effektiv."
    }}

    Var god svara p√• svenska.
    """

    competitor_content_prompt = f"""
    Du √§r en erfaren inneh√•llsstrateg och copywriter med fokus p√• konkurrentanalys. Analysera webbplatsen {url} utifr√•n:
    - Tydlighet och relevans i inneh√•llet.
    - Struktur och l√§sbarhet.
    - Hur v√§l inneh√•llet kommunicerar webbplatsens syfte.

    Identifiera ENDAST deras styrkor i inneh√•llsstrategin - fokusera inte p√• svagheter eller f√∂rb√§ttringsomr√•den.
    Ge en √∂vergripande bed√∂mning, lista tydliga inneh√•llsstyrkor (g√§rna i punktform) samt f√∂rklara varf√∂r inneh√•llet √§r effektivt f√∂r deras m√•lgrupp.

    Svara ENDAST med ett JSON-objekt enligt f√∂ljande format:
    {{
      "summary": "√ñvergripande bed√∂mning av konkurrentens inneh√•llsstyrkor.",
      "observations": [
        "Styrka 1",
        "Styrka 2"
      ],
      "recommendations": "Vad som g√∂r deras inneh√•llsstrategi framg√•ngsrik."
    }}

    Var god svara p√• svenska.
    """
    
    return competitor_seo_prompt, competitor_ux_prompt, competitor_content_prompt

@log_timing
def generate_recommendations_summary_prompt(seo_analysis: str, ux_analysis: str, content_analysis: str) -> str:
    """Generate a prompt for summarizing recommendations from multiple analyses"""
    return f"""
Du √§r en expert p√• webbanalys. Baserat p√• f√∂ljande analyser, ge en sammanfattning och konkreta rekommendationer.

SEO-analys:
{seo_analysis}

UX-analys:
{ux_analysis}

Inneh√•llsanalys:
{content_analysis}

Returnera ENDAST ett JSON-objekt i detta format:

{{
  "seo_recommendations": "F√∂rb√§ttringsf√∂rslag relaterade till SEO.",
  "ux_recommendations": "F√∂rb√§ttringsf√∂rslag relaterade till anv√§ndarupplevelsen.",
  "content_recommendations": "F√∂rb√§ttringsf√∂rslag relaterade till inneh√•llet.",
  "overall_summary": "En sammanfattning av de st√∂rsta f√∂rb√§ttringsomr√•dena p√• sidan."
}}
"""

@log_timing
def generate_competitor_strengths_summary_prompt(seo_analysis: str, ux_analysis: str, content_analysis: str) -> str:
    """Genererar en prompt f√∂r att sammanfatta konkurrentens styrkor"""
    
    summary_prompt = f"""
    Du √§r en expert inom konkurrentanalys f√∂r e-handel och digitala tj√§nster. H√§r √§r resultaten fr√•n tre professionella analyser av en konkurrents webbsida:

    SEO-analys:
    {seo_analysis}

    UX-analys:
    {ux_analysis}

    Inneh√•llsanalys:
    {content_analysis}

    Sammanfatta de viktigaste styrkorna och framg√•ngsfaktorerna fr√•n dessa analyser. Dela in ditt svar i tre sektioner:
    1. SEO-styrkor
    2. UX-styrkor
    3. Inneh√•llsstyrkor

    Ge ocks√• en √∂vergripande sammanfattning av deras huvudsakliga konkurrensf√∂rdelar.

    Svara ENDAST med ett JSON-objekt i exakt f√∂ljande format:
    {{
    "seo_strengths": "text",
    "ux_strengths": "text",
    "content_strengths": "text",
    "overall_strengths": "text"
    }}
    """
    return summary_prompt

@log_timing
def generate_design_prompt(extracted_data: Dict[str, Any], url: str) -> str:
    """Generate a prompt for analyzing design elements"""
    design_prompt = f"""
    Du √§r en extremt kritisk och professionell UX- och designexpert med mycket h√∂ga krav. 
    Analysera webbsidan {url} noggrant baserat p√• f√∂ljande designelement:

    Titel p√• sidan:
    {extracted_data['title']}

    Anv√§nda f√§rger:
    {', '.join(extracted_data['design_summary']['colors'])}

    Typografi:
    {', '.join(extracted_data['design_summary']['fonts'])}

    Huvudrubriker (H1):
    {', '.join(extracted_data['headings']['h1'])}

    Underrubriker (H2):
    {', '.join(extracted_data['headings']['h2'])}

    Navigationsstruktur:
    {', '.join(extracted_data['navigation'])}

    Knapptexter:
    {', '.join(extracted_data['buttons'])}

    Ge nu ett kritiskt och mycket str√§ngt betyg enligt nedanst√•ende skala (0.0 mycket d√•ligt, 1.0 perfekt):

    1. Usability (anv√§ndarv√§nlighet)
    2. Aesthetics (visuell estetik)
    3. Performance (teknisk prestanda)

    Svara ENDAST med exakt f√∂ljande JSON-format:
    {{
      "usability": 0.xx,
      "aesthetics": 0.xx,
      "performance": 0.xx,
      "comment": "Kort, mycket kritisk och professionell motivering"
    }}
    """
    return design_prompt

# Asynkron funktion f√∂r att k√∂ra OpenAI API anrop parallellt f√∂r b√§ttre prestanda
async def analyze_with_openai_async(prompts: List[str]):
    logger.info(f"üîÑ Startar asynkron analys med {len(prompts)} prompter")
    start_time = time.time()
    
    async def process_prompt(prompt, index):
        prompt_start = time.time()
        logger.info(f"Skickar prompt {index+1}/{len(prompts)} till OpenAI")
        
        data = {
            "model": "gpt-3.5-turbo", 
            "messages": [
                {"role": "system", "content": "Du √§r en expert p√• webbdesign, SEO, UX och digital kommunikation."},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 1000,
            "temperature": 0.7
        }
        headers = {
            "Authorization": f"Bearer {openai.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with AsyncClient(timeout=30) as client:
                response = await client.post(
                    "https://api.openai.com/v1/chat/completions",
                    headers=headers,
                    json=data
                )
                response.raise_for_status()
                result = response.json()
                content = result["choices"][0]["message"]["content"].strip()
                prompt_elapsed = time.time() - prompt_start
                logger.info(f"‚úÖ Prompt {index+1} slutf√∂rd p√• {prompt_elapsed:.2f}s")
                return content
        except Exception as e:
            prompt_elapsed = time.time() - prompt_start
            logger.error(f"‚ùå Fel vid prompt {index+1} efter {prompt_elapsed:.2f}s: {str(e)}")
            raise
    
    # K√∂r alla API-anrop parallellt
    tasks = [process_prompt(prompt, i) for i, prompt in enumerate(prompts)]
    responses = await asyncio.gather(*tasks, return_exceptions=True)
    
    # Kontrollera f√∂r eventuella fel
    for i, response in enumerate(responses):
        if isinstance(response, Exception):
            logger.error(f"Fel i prompt {i+1}: {str(response)}")
            responses[i] = f"Fel: {str(response)}"
    
    total_elapsed = time.time() - start_time
    logger.info(f"‚úÖ Alla OpenAI-anrop slutf√∂rda p√• {total_elapsed:.2f}s")
    return responses

# Kompatibilitetsfunktion f√∂r synkron anv√§ndning
@log_timing
async def analyze_with_openai(prompts: List[str]):
    """
    Analyze prompts with OpenAI API.
    This function works both in async and sync contexts.
    """
    # We make this function async and always use it asynchronously
    logger.info(f"Analyzing {len(prompts)} prompts with OpenAI")
    return await analyze_with_openai_async(prompts)
